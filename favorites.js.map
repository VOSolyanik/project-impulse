{"version":3,"file":"favorites.js","sources":["../src/ts/components/exercises/favorites-exercise-items.ts","../src/ts/pages/favorites.ts"],"sourcesContent":["import { Exercise } from '@/types/exercise';\nimport { getExercises } from '@/api/exercises.api';\nimport { ExerciseItems } from './exercise-items';\n\nexport class FavoritesExerciseItems extends ExerciseItems {\n  private allItems: Exercise[] = [];\n\n  constructor(\n    protected containerElement: HTMLElement,\n    private ids: string[],\n    emptyStateMessage: string = 'No favorite exercises found',\n  ) {\n    super(containerElement, true, emptyStateMessage);\n    this.loadData();\n  }\n\n  setFavoriteIds(ids: string[]): void {\n    this.ids = ids;\n    const favSet = new Set(ids);\n    const favorite = this.allItems.filter(item => favSet.has(item._id));\n    this.render(favorite);\n  }\n\n  private async loadData(): Promise<void> {\n    try {\n      const result = await getExercises({\n        page: 1,\n        limit: 999999\n      });\n\n      this.allItems = result.results;\n      this.setFavoriteIds(this.ids);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  }\n}\n","\nimport { favoritesState } from \"@/favorites-state\";\nimport { getExerciseById } from \"@/api/exercises.api\";\nimport { FavoritesExerciseItems } from \"@/components/exercises/favorites-exercise-items\";\nimport { ExerciseModal } from \"@/components/modal/exercise-modal\";\n\nconst exerciseItemsContainer = document\n    .querySelector<HTMLElement>('.exercise-cards-list');\n\nexerciseItemsContainer!.classList.add('custom-scroll-bar');\n\nconst exerciseItems = new FavoritesExerciseItems(\n  exerciseItemsContainer!,\n  favoritesState.gerFavorites(),\n  `It appears that you haven't added any exercises to your favorites yet. To get started, you can add exercises that you like to your favorites for easier access in the future.`\n);\n\n\nconst modal = new ExerciseModal('#exercise-modal-content');\n\nexerciseItems.onExerciseDelete((id) => {\n  favoritesState.removeFavorite(id);\n  exerciseItems.setFavoriteIds(favoritesState.gerFavorites());\n})\n\nexerciseItems.onExerciseSelect(async id => {\n  const exercise = await getExerciseById(id);\n  modal.show(exercise);\n});\n\nmodal.onFavoriteToggle(() => {\n  exerciseItems.setFavoriteIds(favoritesState.gerFavorites());\n});"],"names":["FavoritesExerciseItems","ExerciseItems","containerElement","ids","emptyStateMessage","favSet","favorite","item","result","getExercises","error","exerciseItemsContainer","exerciseItems","favoritesState","modal","ExerciseModal","id","exercise","getExerciseById"],"mappings":"kJAIO,MAAMA,UAA+BC,CAAc,CAGxD,YACYC,EACFC,EACRC,EAA4B,8BAC5B,CACM,MAAAF,EAAkB,GAAME,CAAiB,EAJrC,KAAA,iBAAAF,EACF,KAAA,IAAAC,EAJV,KAAQ,SAAuB,GAQ7B,KAAK,SAAS,CAChB,CAEA,eAAeA,EAAqB,CAClC,KAAK,IAAMA,EACL,MAAAE,EAAS,IAAI,IAAIF,CAAG,EACpBG,EAAW,KAAK,SAAS,UAAeD,EAAO,IAAIE,EAAK,GAAG,CAAC,EAClE,KAAK,OAAOD,CAAQ,CACtB,CAEA,MAAc,UAA0B,CAClC,GAAA,CACI,MAAAE,EAAS,MAAMC,EAAa,CAChC,KAAM,EACN,MAAO,MAAA,CACR,EAED,KAAK,SAAWD,EAAO,QAClB,KAAA,eAAe,KAAK,GAAG,QACrBE,EAAO,CACN,QAAA,MAAM,sBAAuBA,CAAK,CAC5C,CACF,CACF,CC9BA,MAAMC,EAAyB,SAC1B,cAA2B,sBAAsB,EAEtDA,EAAwB,UAAU,IAAI,mBAAmB,EAEzD,MAAMC,EAAgB,IAAIZ,EACxBW,EACAE,EAAe,aAAa,EAC5B,+KACF,EAGMC,EAAQ,IAAIC,EAAc,yBAAyB,EAEzDH,EAAc,iBAAkBI,GAAO,CACrCH,EAAe,eAAeG,CAAE,EAClBJ,EAAA,eAAeC,EAAe,aAAc,CAAA,CAC5D,CAAC,EAEDD,EAAc,iBAAiB,MAAMI,GAAM,CACnC,MAAAC,EAAW,MAAMC,EAAgBF,CAAE,EACzCF,EAAM,KAAKG,CAAQ,CACrB,CAAC,EAEDH,EAAM,iBAAiB,IAAM,CACbF,EAAA,eAAeC,EAAe,aAAc,CAAA,CAC5D,CAAC"}